// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/developer.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeveloperService service

type DeveloperServiceClient interface {
	GenAccessToken(ctx context.Context, in *GenToekenRequest, opts ...grpc.CallOption) (*GenTokenResponse, error)
	CheckToken(ctx context.Context, in *CheckToekenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error)
	// 发送邮件
	SendMail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	// 站内信 API CURD
	MessageCreate(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error)
	MessageUpdate(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	MessageRead(ctx context.Context, in *MessageReadRequest, opts ...grpc.CallOption) (*MessageListResponse, error)
	MessageDelete(ctx context.Context, in *MessageDeleteRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type developerServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeveloperServiceClient(cc *grpc.ClientConn) DeveloperServiceClient {
	return &developerServiceClient{cc}
}

func (c *developerServiceClient) GenAccessToken(ctx context.Context, in *GenToekenRequest, opts ...grpc.CallOption) (*GenTokenResponse, error) {
	out := new(GenTokenResponse)
	err := grpc.Invoke(ctx, "/protos.DeveloperService/GenAccessToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerServiceClient) CheckToken(ctx context.Context, in *CheckToekenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error) {
	out := new(CheckTokenResponse)
	err := grpc.Invoke(ctx, "/protos.DeveloperService/CheckToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerServiceClient) SendMail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := grpc.Invoke(ctx, "/protos.DeveloperService/SendMail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerServiceClient) MessageCreate(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := grpc.Invoke(ctx, "/protos.DeveloperService/MessageCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerServiceClient) MessageUpdate(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/protos.DeveloperService/MessageUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerServiceClient) MessageRead(ctx context.Context, in *MessageReadRequest, opts ...grpc.CallOption) (*MessageListResponse, error) {
	out := new(MessageListResponse)
	err := grpc.Invoke(ctx, "/protos.DeveloperService/MessageRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerServiceClient) MessageDelete(ctx context.Context, in *MessageDeleteRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := grpc.Invoke(ctx, "/protos.DeveloperService/MessageDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeveloperService service

type DeveloperServiceServer interface {
	GenAccessToken(context.Context, *GenToekenRequest) (*GenTokenResponse, error)
	CheckToken(context.Context, *CheckToekenRequest) (*CheckTokenResponse, error)
	// 发送邮件
	SendMail(context.Context, *EmailRequest) (*EmailResponse, error)
	// 站内信 API CURD
	MessageCreate(context.Context, *Message) (*MessageResponse, error)
	MessageUpdate(context.Context, *Message) (*Message, error)
	MessageRead(context.Context, *MessageReadRequest) (*MessageListResponse, error)
	MessageDelete(context.Context, *MessageDeleteRequest) (*MessageResponse, error)
}

func RegisterDeveloperServiceServer(s *grpc.Server, srv DeveloperServiceServer) {
	s.RegisterService(&_DeveloperService_serviceDesc, srv)
}

func _DeveloperService_GenAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenToekenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServiceServer).GenAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeveloperService/GenAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServiceServer).GenAccessToken(ctx, req.(*GenToekenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckToekenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeveloperService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServiceServer).CheckToken(ctx, req.(*CheckToekenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperService_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServiceServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeveloperService/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServiceServer).SendMail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperService_MessageCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServiceServer).MessageCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeveloperService/MessageCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServiceServer).MessageCreate(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperService_MessageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServiceServer).MessageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeveloperService/MessageUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServiceServer).MessageUpdate(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperService_MessageRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServiceServer).MessageRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeveloperService/MessageRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServiceServer).MessageRead(ctx, req.(*MessageReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperService_MessageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServiceServer).MessageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeveloperService/MessageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServiceServer).MessageDelete(ctx, req.(*MessageDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeveloperService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DeveloperService",
	HandlerType: (*DeveloperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenAccessToken",
			Handler:    _DeveloperService_GenAccessToken_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _DeveloperService_CheckToken_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _DeveloperService_SendMail_Handler,
		},
		{
			MethodName: "MessageCreate",
			Handler:    _DeveloperService_MessageCreate_Handler,
		},
		{
			MethodName: "MessageUpdate",
			Handler:    _DeveloperService_MessageUpdate_Handler,
		},
		{
			MethodName: "MessageRead",
			Handler:    _DeveloperService_MessageRead_Handler,
		},
		{
			MethodName: "MessageDelete",
			Handler:    _DeveloperService_MessageDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/developer.proto",
}

func init() { proto.RegisterFile("protos/developer.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x3b, 0x4f, 0xf3, 0x30,
	0x18, 0x85, 0x2b, 0x7d, 0xd2, 0x27, 0x64, 0xc4, 0xcd, 0x2a, 0x17, 0x05, 0xa6, 0x4a, 0xac, 0x41,
	0xa2, 0x13, 0x62, 0xa2, 0x2d, 0x6d, 0x07, 0xba, 0xd0, 0x32, 0x23, 0x93, 0x1c, 0x41, 0x94, 0xc4,
	0x36, 0x7e, 0xdd, 0xf2, 0x83, 0xf9, 0x23, 0xa8, 0xb5, 0x1d, 0x52, 0x03, 0xeb, 0x73, 0x2e, 0xce,
	0xd1, 0x1b, 0x76, 0xa2, 0x8d, 0xb2, 0x8a, 0xae, 0x72, 0xac, 0x50, 0x29, 0x0d, 0x93, 0x6e, 0x00,
	0xff, 0xef, 0x78, 0xc2, 0xbd, 0x6e, 0x55, 0x09, 0xe9, 0xb4, 0x24, 0x64, 0xc4, 0x07, 0x3d, 0xa3,
	0x16, 0x45, 0xe5, 0x79, 0xd7, 0xf3, 0x1a, 0x44, 0xe2, 0x15, 0x8e, 0x5e, 0x7f, 0xfe, 0x63, 0x87,
	0xa3, 0xd0, 0x3e, 0x87, 0x59, 0x15, 0x19, 0xf8, 0x98, 0xed, 0x4f, 0x20, 0xef, 0xb2, 0x0c, 0x44,
	0x8b, 0x75, 0x35, 0x3f, 0x73, 0x76, 0x4a, 0x27, 0x90, 0x0b, 0x85, 0x12, 0xf2, 0x11, 0xef, 0x4b,
	0x90, 0x4d, 0xb6, 0x95, 0x8d, 0x40, 0x5a, 0x49, 0x42, 0xaf, 0xc3, 0xc7, 0x8c, 0x0d, 0xdf, 0x90,
	0x95, 0xae, 0x23, 0x09, 0x4e, 0xcf, 0xda, 0x2d, 0xb1, 0xb6, 0xdd, 0x73, 0xc3, 0x76, 0xe6, 0x90,
	0xf9, 0x4c, 0x14, 0x15, 0xef, 0x06, 0xe7, 0xfd, 0x7a, 0x5b, 0xc8, 0x1f, 0x47, 0xb4, 0x89, 0xde,
	0xb2, 0xbd, 0x99, 0x1b, 0x3c, 0x34, 0x10, 0x16, 0xfc, 0x20, 0x38, 0x3d, 0x4e, 0x4e, 0x23, 0xd0,
	0x0a, 0xf7, 0x9b, 0xf0, 0x93, 0xce, 0x7f, 0x0d, 0xc7, 0xa0, 0xd7, 0xe1, 0x53, 0xb6, 0xdb, 0x34,
	0x89, 0xfc, 0x7b, 0x75, 0x0b, 0x86, 0xaf, 0x3e, 0x8f, 0xb4, 0x87, 0x82, 0x6c, 0xeb, 0xf9, 0x69,
	0xf3, 0xfc, 0x08, 0x15, 0x2c, 0xf8, 0x45, 0xe4, 0x77, 0x38, 0xb4, 0xfd, 0x3d, 0x64, 0x70, 0xc9,
	0x8e, 0x32, 0x55, 0xa7, 0x42, 0x97, 0x7a, 0x69, 0xfc, 0xe9, 0x07, 0x3f, 0xee, 0xfe, 0xe2, 0x7e,
	0xab, 0xfe, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x27, 0xd8, 0xb3, 0x77, 0x02, 0x00, 0x00,
}
